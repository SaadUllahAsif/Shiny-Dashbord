sampleData <- read.csv("Amazon.csv")
setwd("C:/Users/Saad Ullah/Desktop/ASDM/shiny dashbord")
sampleData <- read.csv("Amazon.csv")
library(factoextra)
library(shiny)
library(shinydashboard)
library("DT")
ui <- dashboardPage(
dashboardHeader(title = "K-mean Clustering"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Dataset",  icon = icon("tree"),
menuSubItem("K-Mean Cluster", tabName = "subitem1"),
menuSubItem("Sentemental Analysis", tabName = "subitem2")   ),
menuItem("Analysis",  icon = icon("car"),
menuSubItem("K-Mean Cluster", tabName = "analysis1"),
menuSubItem("Sentemental Analysis", tabName = "analysis2")   )
)
),
dashboardBody(
tabItems(
tabItem("dashboard", "WELCOME!!"),
tabItem("subitem1",
fluidRow(
dataTableOutput("sampleData")
)),
tabItem("subitem2",
fluidRow(
dataTableOutput("sentimental_analysis")
)),
tabItem("analysis1",
fluidRow(
plotOutput('graph')
)),
tabItem("analysis2",
fluidRow(
"Hello World"
))
)
)
)
server <- function(input, output) {
output$sampleData <- renderDataTable(sampleData)
output$sentimental_analysis <-renderDataTable({
data <- read.csv("tourist_accommodation_reviews.csv", header= TRUE)
hotels <- data[(data$Hotel.Restaurant.name == "Thong Dee The Kathu Brasserie" |
data$Hotel.Restaurant.name == "Odysseus Greek Organic Restaurant"|
data$Hotel.Restaurant.name == "Green Tamarind Kitchen" |
data$Hotel.Restaurant.name == "Dee Plee - Anantara Layan Phuket Resort" |
data$Hotel.Restaurant.name == "The Tavern" |
data$Hotel.Restaurant.name == "EAT. bar & grill" |
data$Hotel.Restaurant.name == "Surf and Turf by Soul Kitchen" |
data$Hotel.Restaurant.name == "Siam Supper Club" |
data$Hotel.Restaurant.name == "Sam's Steaks and Grill" |
data$Hotel.Restaurant.name == "Istanbul Turkish Restaurant" |
data$Hotel.Restaurant.name == "The Corner Restaurant" |
data$Hotel.Restaurant.name == "Kataturk Turkish Restaurant" |
data$Hotel.Restaurant.name == "Sala Sawasdee Lobby Bar" |
data$Hotel.Restaurant.name == "The Palm Cuisine" |
data$Hotel.Restaurant.name == "Highway Curry Indian & Thai Cuisine" |
data$Hotel.Restaurant.name == "Tandoori Flames" |
data$Hotel.Restaurant.name == "Pad Thai Shop" |
data$Hotel.Restaurant.name == "Golden Paradise Restaurant" |
data$Hotel.Restaurant.name == "Mr.Coffee" |
data$Hotel.Restaurant.name == "Flavor Phuket" |
data$Hotel.Restaurant.name == "Baan Noy Restaurant" |
data$Hotel.Restaurant.name == "Ao Chalong Yacht Club Restaurant" |
data$Hotel.Restaurant.name == "Naughty Nuri's Phuket" |
data$Hotel.Restaurant.name == "Surin Chill House" |
data$Hotel.Restaurant.name == "Natural Efe Macrobiotic World" |
data$Hotel.Restaurant.name == "Honeymoon Thai Restaurant by Kenya" |
data$Hotel.Restaurant.name == "O-OH Farm Ta-Eiad" |
data$Hotel.Restaurant.name == "Da Puccio Restaurant" |
data$Hotel.Restaurant.name == "Sizzle Rooftop Restaurant" |
data$Hotel.Restaurant.name == "Benny's American Bar & Grill"
) ,]
})
output$graph <- renderPlot({
# Removing the date column
sampleData.labels =sampleData$Date
table(sampleData.labels)
kmData <- sampleData[2:7]
# Scaling data
kmData_scale <- scale(kmData)
# Distance
kmData_distance <- dist(kmData_scale)
# calculating how many clusters needed using within sum square (WSS)
fviz_nbclust(kmData_scale, kmeans, method = "wss") + labs(subtitle = "Elbow method")
#k-mean
kmoutput <- kmeans(kmData_scale, centers = 2, nstart = 100)
# visualization and clustering results
kmdataCluster <- kmoutput$cluster
rownames(kmData_scale) <- paste(sampleData$Date, 1:dim(sampleData)[1], sep = "-")
fviz_cluster(list(data=kmData_scale, cluster = kmdataCluster))
})
output$selection <- renderTable({
data <- subset(selection, data$Hotel.Restaurant.name == input$selection)
})
}
shinyApp(ui, server)
runApp('1.R')
runApp('1.R')
runApp('1.R')
runApp('1.R')
runApp('1.R')
library(shiny)
library(shinydashboard)
library("DT")
ui <- dashboardPage(
dashboardHeader(title = "K-mean Clustering"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Dataset",  icon = icon("tree"),
menuSubItem("K-Mean Cluster", tabName = "subitem1"),
menuSubItem("Sentemental Analysis", tabName = "subitem2")   ),
menuItem("Analysis",  icon = icon("car"),
menuSubItem("K-Mean Cluster", tabName = "analysis1"),
menuSubItem("Sentemental Analysis", tabName = "analysis2")   )
)
),
dashboardBody(
tabItems(
tabItem("dashboard", "WELCOME!!"),
tabItem("subitem1",
fluidRow(
dataTableOutput("sampleData")
)),
tabItem("subitem2",
fluidRow(
dataTableOutput("sentimental_analysis")
)),
tabItem("analysis1",
fluidRow(
plotOutput('graph')
)),
tabItem("analysis2",
fluidRow(
plotOutput('graph')
))
)
)
)
server <- function(input, output) {
output$sampleData <- renderDataTable({
sampleData <- read.csv("Amazon.csv")
sampleData
})
output$sentimental_analysis <-renderDataTable({
data <- read.csv("tourist_accommodation_reviews.csv", header= TRUE)
hotels <- data[(data$Hotel.Restaurant.name == "Thong Dee The Kathu Brasserie" |
data$Hotel.Restaurant.name == "Odysseus Greek Organic Restaurant"|
data$Hotel.Restaurant.name == "Green Tamarind Kitchen" |
data$Hotel.Restaurant.name == "Dee Plee - Anantara Layan Phuket Resort" |
data$Hotel.Restaurant.name == "The Tavern"
) ,]
})
output$graph <- renderPlot({
library(factoextra)
sampleData <- read.csv("Amazon.csv")
# Removing the date column
sampleData.labels =sampleData$Date
table(sampleData.labels)
kmData <- sampleData[2:7]
# Scaling data
kmData_scale <- scale(kmData)
# Distance
kmData_distance <- dist(kmData_scale)
# calculating how many clusters needed using within sum square (WSS)
fviz_nbclust(kmData_scale, kmeans, method = "wss") + labs(subtitle = "Elbow method")
#k-mean
kmoutput <- kmeans(kmData_scale, centers = 2, nstart = 100)
# visualization and clustering results
kmdataCluster <- kmoutput$cluster
rownames(kmData_scale) <- paste(sampleData$Date, 1:dim(sampleData)[1], sep = "-")
fviz_cluster(list(data=kmData_scale, cluster = kmdataCluster))
})
output$first <- renderPlot({
hotel1 <- hotels[(hotels$Hotel.Restaurant.name == "Thong Dee The Kathu Brasserie"),]
library(tm)
corpus <- iconv(hotels$Review)
corpus <- Corpus(VectorSource(corpus))
corpus <-tm_map(corpus, tolower)
corpus <-tm_map(corpus, removePunctuation)
corpus <-tm_map(corpus, removeNumbers)
corpus <-tm_map(corpus, removeWords, stopwords('english'))
removeURL <- function(x) gsub('http[[:alnum:]]*','',x)
corpus <-tm_map(corpus, content_transformer(removeURL))
corpus <-tm_map(corpus, stripWhitespace)
tdm <- TermDocumentMatrix(corpus)
tdm <- as.matrix(tdm)
tdm[1:10, 1:20]
positive_lexicon <- read.csv("Positive words.txt")
negative_lexicon <- read.csv("Negative words.txt")
library("wordcloud")
sentiment <- function(corpus)
{
#generate wordclouds
wordcloud(corpus,
min.freq = 3,
colors=brewer.pal(8, "Dark2"),
random.color = TRUE,
max.words = 100)
#Calculating the count of total positive and negative words in each review
#Create variables and vectors
total_pos_count <- 0
total_neg_count <- 0
pos_count_vector <- c()
neg_count_vector <- c()
#Calculate the size of the corpus
size <- length(corpus)
for(i in 1:size)
{
#All the words in current review
corpus_words<- list(strsplit(corpus[[i]]$content, split = " "))
#positive words in current review
pos_count <-length(intersect(unlist(corpus_words), unlist(positive_lexicon)))
#negative words in current review
neg_count <- length(intersect(unlist(corpus_words), unlist(negative_lexicon)))
total_pos_count <- total_pos_count + pos_count ## overall positive count
total_neg_count <- total_neg_count + neg_count ## overall negative count
}
#Calculating overall percentage of positive and negative words of all the reviews
total_pos_count ## overall positive count
total_neg_count ## overall negative count
total_count <- total_pos_count + total_neg_count
overall_positive_percentage <- (total_pos_count*100)/total_count
overall_negative_percentage <- (total_neg_count*100)/total_count
overall_positive_percentage ## overall positive percentage
#Create a dataframe with all the positive and negative reviews
df<-data.frame(Review_Type=c("Postive","Negitive"),
Count=c(total_pos_count ,total_neg_count ))
print(df) #Print
overall_positive_percentage<-paste("Percentage of Positive Reviews:",
round(overall_positive_percentage,2),"%")
return(overall_positive_percentage)
sentiment(corpus)
}
})
}
shinyApp(ui, server)
runApp('1.R')
